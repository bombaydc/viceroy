@use 'sass:map';

//Define mixins for keyframe animations
@keyframes m-btn-plain-text-underline-in {
	from {
		transform: scaleX(0);
	}
	to {
		transform: scaleX(1);
	}
}

@keyframes m-btn-plain-text-underline-out {
	from {
		transform: scaleX(1);
	}
	to {
		transform: scaleX(0);
	}
}
@keyframes css-keyframes__fade-in {
	from {
		opacity: 0;
	}
	to {
		opacity: 1;
	}
}
@keyframes skeleton-animation {
	0% {
		background-position: 120% 0%;
	}
	100% {
		background-position: -80% 0%;
	}
}
@function str-replace($string, $search, $replace: "") {
	$index: str_index($string, $search);
	@if $index {
		@return str_slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
	}
	@return $string;
}
@mixin css-keyframes__fade-in-scale-in($fromScale) {
	//Convert $fromScale to a string
	$fromScale-str: unquote("#{$fromScale}");
	//Determine the direction
	$direction: if($fromScale > 1, "down", "up");
	//Replace decimal point with 'pt' in the scale value
	$numeric-value: str-replace($fromScale-str, ".", "pt");
	//Generate a unique name using the direction and numeric value
	$animation-name: "css-keyframes__fade-in-scale-" + $direction + "-" + $numeric-value;
	@keyframes #{$animation-name} {
		from {
			opacity: 0;
			transform: scale(#{$fromScale});
		}
		to {
			opacity: 1;
			transform: none;
		}
	}
	animation-name: #{$animation-name};
}
@mixin css-keyframes__fade-in-move-in($fromY) {
	//Convert $fromY to a string
	$fromY-str: unquote("#{$fromY}");
	//Check if $fromY contains a percent sign
	$is-percent: str-index($fromY-str, "%");
	//Check if $fromY contains 'px'
	$is-px: str-index($fromY-str, "px");
	//Determine the value type
	$value-type: if($is-percent, "percent", if($is-px, "px", "unitless"));
	//Remove the unit from $fromY
	$numeric-value: if($is-percent, str-slice($fromY-str, 1, -1), if($is-px, str-slice($fromY-str, 1, -3), $fromY-str));
	$numeric-value-sanitized: str-replace($fromY-str, "-", "");
	$numeric-value-sanitized: str-replace($numeric-value-sanitized, "%", "");
	$numeric-value-sanitized: str-replace($numeric-value-sanitized, "px", "");
	//Determine the direction
	$direction: if(to-number($numeric-value) < 0, "down", "up");
	//Generate a unique name using the direction, numeric value, and value type
	$animation-name: "css-keyframes__fade-in-move-" + $direction + "-" + $numeric-value-sanitized + "" + $value-type;
	@keyframes #{$animation-name} {
		from {
			opacity: 0;
			transform: translateY(#{$fromY});
		}
		to {
			opacity: 1;
			transform: none;
		}
	}
	animation-name: #{$animation-name};
}
@mixin css-keyframes__fade-in-move-in-horizontal($fromX) {
	//Convert $fromY to a string
	$fromX-str: unquote("#{$fromX}");
	//Check if $fromY contains a percent sign
	$is-percent: str-index($fromX-str, "%");
	//Check if $fromY contains 'px'
	$is-px: str-index($fromX-str, "px");
	//Determine the value type
	$value-type: if($is-percent, "percent", if($is-px, "px", "unitless"));
	//Remove the unit from $fromY
	$numeric-value: if($is-percent, str-slice($fromX-str, 1, -1), if($is-px, str-slice($fromX-str, 1, -3), $fromX-str));
	$numeric-value-sanitized: str-replace($fromX-str, "-", "");
	$numeric-value-sanitized: str-replace($numeric-value-sanitized, "%", "");
	$numeric-value-sanitized: str-replace($numeric-value-sanitized, "px", "");
	//Determine the direction
	$direction: if(to-number($numeric-value) < 0, "right", "left");
	//Generate a unique name using the direction, numeric value, and value type
	$animation-name: "css-keyframes__fade-in-move-" + $direction + "-" + $numeric-value-sanitized + "" + $value-type;
	@keyframes #{$animation-name} {
		from {
			opacity: 0;
			transform: translateX(#{$fromX});
		}
		to {
			opacity: 1;
			transform: none;
		}
	}
	animation-name: #{$animation-name};
}
@mixin css-keyframes__move-down($fromY) {
	//Convert $fromY to a string
	$fromY-str: unquote("#{$fromY}");
	//Check if $fromY contains a percent sign
	$is-percent: str-index($fromY-str, "%");
	//Check if $fromY contains 'px'
	$is-px: str-index($fromY-str, "px");
	//Determine the value type
	$value-type: if($is-percent, "percent", if($is-px, "px", "unitless"));
	//Remove the unit from $fromY
	$numeric-value: if($is-percent, str-slice($fromY-str, 1, -1), if($is-px, str-slice($fromY-str, 1, -3), $fromY-str));
	$numeric-value-sanitized: str-replace($fromY-str, "-", "");
	$numeric-value-sanitized: str-replace($numeric-value-sanitized, "%", "");
	$numeric-value-sanitized: str-replace($numeric-value-sanitized, "px", "");
	//Determine the direction
	$direction: if(to-number($numeric-value) < 0, "down", "up");
	//Generate a unique name using the direction, numeric value, and value type
	$animation-name: "css-keyframes__fade-in-move-" + $direction + "-" + $numeric-value-sanitized + "" + $value-type;
	@keyframes #{$animation-name} {
		from {
			transform: translateY(#{$fromY});
		}
		to {
			transform: none;
		}
	}
	animation-name: #{$animation-name};
}
@function to-number($value) {
	@if type-of($value) == "number" {
		@return $value;
	} @else if type-of($value) != "string" {
		@error 'Value for `to-number` should be a number or a string.';
	}

	$result: 0;
	$digits: 0;
	$minus: str-slice($value, 1, 1) == "-";
	$numbers: (
		"0": 0,
		"1": 1,
		"2": 2,
		"3": 3,
		"4": 4,
		"5": 5,
		"6": 6,
		"7": 7,
		"8": 8,
		"9": 9,
	);

	@for $i from if($minus, 2, 1) through str-length($value) {
		$character: str-slice($value, $i, $i);

		@if (index(map-keys($numbers), $character) or $character == ".") {
			@if $character == "." {
				$digits: 1;
			} @else if $digits == 0 {
				$result: $result * 10 + map.get($numbers, $character);
			} @else {
				$digits: $digits * 10;
				$result: $result + map.get($numbers, $character) / $digits;
			}
		}
	}

	@return if($minus, -$result, $result);
}
