/* breakpoints */
$breakpoints: (
  xxs: 360px,
  xs: 414px,
  sm: 768px,
  md: 1024px,
  lg: 1200px,
  xl: 1280px,
  xxl: 1440px,
  xxxl: 1920px,
  maxwidth: 1600px,
  maxwidth-plus-scrollbar: 1615px,
);

// Enhanced: parse operators like >=sm, <=lg, ==md
@use "sass:list";
@use "sass:map";
@use "sass:string";

@function parse-condition($condition) {
  $operator: if(string.slice($condition, 2, 2) == "=",
    string.slice($condition, 1, 2),
    string.slice($condition, 1, 1)
  );

  $breakpoint-name: if($operator == ">=" or $operator == "<=",
    string.slice($condition, 3),
    string.slice($condition, 2)
  );

  $value: map.get($breakpoints, $breakpoint-name);

  @if not $value {
    @warn "⚠️ Unknown breakpoint: `#{$breakpoint-name}`";
    @return null;
  }

  @if $operator == ">" {
    @return "(min-width: #{($value + 1)})";
  } @else if $operator == "<" {
    @return "(max-width: #{($value - 1)})";
  } @else if $operator == ">=" {
    @return "(min-width: #{$value})";
  } @else if $operator == "<=" {
    @return "(max-width: #{$value})";
  } @else if $operator == "=" or $operator == "==" {
    @return "(min-width: #{$value})";
  } @else {
    @warn "⚠️ Invalid operator: `#{$operator}` in `#{$condition}`";
    @return null;
  }
}

// Usage: @include media(">=sm", "<xl")
@mixin media($conditions...) {
  $queries: ();

  @each $cond in $conditions {
    $parsed: parse-condition($cond);
    @if $parsed {
      $queries: list.append($queries, $parsed, comma);
    }
  }

  @if list.length($queries) > 0 {
    @media #{list.join($queries, " and ")} {
      @content;
    }
  }
}
